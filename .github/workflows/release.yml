name: Auto Release

on:
  push:
    branches:
      - release/**

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Calculate next patch version
        id: next_version
        run: |
          branch="${GITHUB_REF_NAME}" 
          major_minor="$branch"

          git fetch --tags

          existing_tags=$(git tag -l "${major_minor}.*" | sort -V)
          last_patch=0

          for tag in $existing_tags; do
            patch=${tag##*.}
            if [[ $patch =~ ^[0-9]+$ ]] && (( patch >= last_patch )); then
              last_patch=$((patch + 1))
            fi
          done

          echo "Next version: $next_version"

          echo "next_version=$next_version" >> $GITHUB_OUTPUT
      - name: Update version in packaging/control
        run: |
          version=${{ steps.next_version.outputs.next_version }}
          sed -i "s|^Version: .*|Version: $version|" ./packaging/control

      - name: Create Git tag
        run: |
          version=${{ steps.next_version.outputs.next_version }}
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag "$version"
          git push origin "$version"

      - name: Generate changelog from PR titles
        id: changelog
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git fetch --tags

          tags=($(git tag --sort=version:refname))

          if [ ${#tags[@]} -lt 2 ]; then
            echo "Not enough tags to compare"
            exit 0
          fi

          from_tag="${tags[-2]}"
          to_tag="${tags[-1]}"
          echo "Comparing $from_tag to $to_tag"

          prs=$(git log --merges --pretty=format:"%s" "$from_tag..$to_tag" | grep -Eo 'Merge pull request #([0-9]+)' | grep -Eo '[0-9]+' | sort -u)

          features=""
          bugfixes=""
          others=""

          for pr in $prs; do
            data=$(gh pr view $pr --json headRefName,title,url -q '.')
            branch=$(echo "$data" | jq -r '.headRefName')
            title=$(echo "$data" | jq -r '.title')
            url=$(echo "$data" | jq -r '.url')
            entry="* [$title]($url)"

            if [[ "$branch" == feature/* ]]; then
              features+="$entry"$'\n'
            elif [[ "$branch" == bug/* ]]; then
              bugfixes+="$entry"$'\n'
            elif [[ "$branch" == main ]]; then
              continue
            else
              others+="$entry"$'\n'
            fi
          done

          echo "features<<EOF" >> $GITHUB_OUTPUT
          echo "${features:-_None_}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "bugfixes<<EOF" >> $GITHUB_OUTPUT
          echo "${bugfixes:-_None_}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "others<<EOF" >> $GITHUB_OUTPUT
          echo "${others:-_None_}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build release artifacts
        run: |
          make release
          ./build-deb.sh
          mkdir -p release-artifacts
          cp target/release/simeis-server release-artifacts/
          cp doc/manual.pdf release-artifacts/ || true
          cp simeis_amd64.deb release-artifacts/ || true

      - name: Create GitHub Release
        uses: mini-bomba/create-github-release@v1.1.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: "${{ steps.next_version.outputs.next_version }}"
          name: "Release ${{ steps.next_version.outputs.next_version }}"
          body: |
            ## Changelog

            ### Features
            ${{ steps.changelog.outputs.features }}

            ### Bugfixes
            ${{ steps.changelog.outputs.bugfixes }}

            ### Other
            ${{ steps.changelog.outputs.others }}

            [Workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

          files: |
            release-artifacts/*
          clear_attachments: true
