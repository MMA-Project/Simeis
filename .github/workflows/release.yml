name: Auto Release

on:
  push:
    branches:
      - release/**

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Calculate next patch version
        id: next_version
        run: |
          branch="${GITHUB_REF_NAME}" 
            major_minor="${branch#release/}"

          git fetch --tags

          existing_tags=$(git tag -l "${major_minor}.*" | sort -V)
          last_patch=0

          for tag in $existing_tags; do
            patch=${tag##*.}
            if [[ $patch =~ ^[0-9]+$ ]] && (( patch >= last_patch )); then
              last_patch=$((patch + 1))
            fi
          done

          next_version="${major_minor}.${last_patch}"

          echo "next_version=$next_version" >> $GITHUB_OUTPUT
      - name: Update version in packaging/control
        run: |
          version=${{ steps.next_version.outputs.next_version }}
          sed -i "s|^Version: .*|Version: $version|" ./packaging/control
      - name: Update version in Cargo.toml
        run: |
          version=${{ steps.next_version.outputs.next_version }}
          sed -i "s|^version = \".*\"|version = \"$version\"|" ./simeis-server/Cargo.toml
      - name: Create Git tag
        run: |
          version=${{ steps.next_version.outputs.next_version }}
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag "$version"
          git push origin "$version"

      - name: Generate changelog "What's Changed"
        id: changelog
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git fetch --tags

          tags=($(git tag --sort=version:refname))

          if [ ${#tags[@]} -lt 2 ]; then
            echo "Not enough tags to compare"
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "_Initial release_" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            exit 0
          fi

          from_tag="${tags[-2]}"
          to_tag="${tags[-1]}"
          echo "Comparing $from_tag to $to_tag"

          prs=$(git log --merges --pretty=format:"%s" "$from_tag..$to_tag" | grep -Eo 'Merge pull request #[0-9]+' | grep -Eo '[0-9]+' | sort -u)

          changelog=""

          for pr in $prs; do
            pr_branch=$(gh pr view $pr --json baseRefName,headRefName -q '.headRefName')
            if [ "$pr_branch" = "main" ]; then
              continue
            fi
            pr_data=$(gh pr view $pr --json title,author,url -q '.')
            title=$(echo "$pr_data" | jq -r '.title')
            author=$(echo "$pr_data" | jq -r '.author.login')
            url=$(echo "$pr_data" | jq -r '.url')
            changelog+="* ${title} by @${author} in [#${pr}](${url})"$'\n'
          done

            changelog+=$'\n'"[Full Changelog](https://github.com/${{ github.repository }}/compare/${from_tag}...${to_tag})"

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$changelog" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build release artifacts
        run: |
          make release
          ./build-deb.sh
          mkdir -p release-artifacts
          cp target/release/simeis-server release-artifacts/
          cp doc/manual.pdf release-artifacts/ || true
          cp simeismma_amd64.deb release-artifacts/ || true
      - name: Build Docker image
        run: |
          docker build -f .github/Dockerfile -t simeis:${{ steps.next_version.outputs.next_version }} .

      - name: Save Docker image as archive
        run: |
          mkdir -p release-artifacts
          docker image save simeis:${{ steps.next_version.outputs.next_version }} -o release-artifacts/simeis-docker.tar
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: helldeal
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and export to Docker
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .github/Dockerfile
          load: true
          tags: simeis:test

      - name: Test
        run: |
          docker run -d --name simeis_test simeis:test
          sleep 5
          if docker ps --filter "name=simeis_test" --filter "status=running" | grep simeis_test; then
            echo "Server is running"
            docker stop simeis_test
            docker rm simeis_test
          else
            echo "Server failed to start"
            docker logs simeis_test || true
            docker rm simeis_test
            exit 1
          fi

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: .github/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: helldeal/simeis:${{ steps.next_version.outputs.next_version }}
      - name: Set up SSH key
        run: |
          echo "${{ secrets.SSH_PK }}" > key.pem
          chmod 600 key.pem
      - name: Test SSH connection
        run: |
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i key.pem student@${{ secrets.SSH_IP }} "echo 'SSH connection successful'"
      - name: Copy files to remote server
        run: |
          scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i key.pem release-artifacts/simeismma_amd64.deb student@${{ secrets.SSH_IP }}:~/MMA/
      - name: Install package on remote server
        run: |
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i key.pem student@${{ secrets.SSH_IP }} "sudo apt install ~/MMA/simeismma_amd64.deb -f -y"
      - name: Restart service on remote server
        run: |
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i key.pem student@${{ secrets.SSH_IP }} "
          pid=\$(lsof -i :7272 -t)
          if [ -n \"\$pid\" ]; then
            kill \$pid
          fi
          sleep 2
          nohup simeismma > /dev/null 2>&1 &
          "
      - name: Check if new version is running on remote server
        run: |
          version=$(curl -s http://${{ secrets.SSH_IP }}/version)
          echo "Remote server version: $version"
          if [[ "$version" != "${{ steps.next_version.outputs.next_version }}" ]]; then
            echo "Version mismatch! Expected ${{ steps.next_version.outputs.next_version }}, got $version"
            exit 1
          fi
          "
      - name: Create GitHub Release
        uses: mini-bomba/create-github-release@v1.1.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: "${{ steps.next_version.outputs.next_version }}"
          name: "Release ${{ steps.next_version.outputs.next_version }}"
          body: |
            ## What's Changed

            ${{ steps.changelog.outputs.changelog }}

          files: |
            release-artifacts/*
          clear_attachments: true
