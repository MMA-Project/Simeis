name: Auto Release

on:
  push:
    branches:
      - release/**

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Get last tag
        id: last_tag
        run: |
          git fetch --tags
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          echo "last_tag=$last_tag" >> $GITHUB_OUTPUT

      - name: Extract version tag from branch name
        id: extract_tag
        run: |
          full_ref="${{ github.event.pull_request.base.ref }}"
          version="${full_ref##*/}"
          echo "version_tag=$version" >> $GITHUB_OUTPUT

      - name: Generate changelog from merged PRs
        id: changelog
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git fetch --tags

          last_tag="${{ steps.last_tag.outputs.last_tag }}"
          if [ -z "$last_tag" ]; then
            commit_range=""
          else
            commit_range="$last_tag..HEAD"
          fi

          echo "features=" >> $GITHUB_OUTPUT
          echo "bugfixes=" >> $GITHUB_OUTPUT
          echo "others=" >> $GITHUB_OUTPUT

          # get merged PR numbers in the range
          prs=$(git log --merges --pretty=format:"%s" $commit_range | grep -Eo '#[0-9]+' | sed 's/#//' | sort -u)

          features=""
          bugfixes=""
          others=""

          for pr in $prs; do
            info=$(gh pr view $pr --json headRefName,title,url -q '.')
            branch=$(echo "$info" | jq -r '.headRefName')
            title=$(echo "$info" | jq -r '.title')
            url=$(echo "$info" | jq -r '.url')

            entry="* [$title]($url)"

            if [[ "$branch" == feature/* ]]; then
              features+="$entry"$'\n'
            elif [[ "$branch" == bug/* ]]; then
              bugfixes+="$entry"$'\n'
            else
              others+="$entry"$'\n'
            fi
          done

          echo "features<<EOF" >> $GITHUB_OUTPUT
          echo "$features" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "bugfixes<<EOF" >> $GITHUB_OUTPUT
          echo "$bugfixes" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "others<<EOF" >> $GITHUB_OUTPUT
          echo "$others" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT


      - name: Build release artifacts
        run: |
          make release
          mkdir -p release-artifacts
          cp target/release/simeis-server release-artifacts/
          cp doc/manual.pdf release-artifacts/ || true

      - name: Create GitHub Release
        uses: mini-bomba/create-github-release@v1.1.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: "${{ steps.extract_tag.outputs.version_tag }}"
          name: "Release ${{ steps.extract_tag.outputs.version_tag }}"
          body: |
            ## Changelog

            ### Features
            ${{ steps.changelog.outputs.features }}

            ### Bugfixes
            ${{ steps.changelog.outputs.bugfixes }}

            ### Other
            ${{ steps.changelog.outputs.others }}

            [Workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

          files: |
            release-artifacts/*
          clear_attachments: true
